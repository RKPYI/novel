// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER   @map("user")
  ADMIN  @map("admin")
  AUTHOR @map("author")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String
  image         String?
  emailVerified Boolean?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  novels        Novel[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String?
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  // for Better Auth credentials
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(cuid())
  token     String
  userId    String
  expiresAt DateTime
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum NovelStatus {
  ONGOING   @map("ongoing")
  COMPLETED @map("completed")
  HIATUS    @map("hiatus")
}

model Novel {
  id            Int         @id @default(autoincrement())
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorName    String?
  title         String
  slug          String      @unique
  description   String?
  status        NovelStatus @default(ONGOING)
  coverUrl      String?
  totalChapters Int         @default(0)
  views         Int         @default(0)
  chapters      Chapter[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Chapter {
  id            Int       @id @default(autoincrement())
  novelId       Int
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  chapterNumber Int       @default(1)
  title         String
  content       String
  wordCount     Int       @default(0)
  views         Int       @default(0)
  isFree        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAT   DateTime?
}
